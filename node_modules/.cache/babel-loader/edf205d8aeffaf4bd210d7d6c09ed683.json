{"ast":null,"code":"var _jsxFileName = \"/Users/felipemachado/Documents/Gostack/gorestaurant-web/src/pages/Dashboard/index.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Header from '../../components/Header';\nimport api from '../../services/api';\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\nimport { FoodsContainer } from './styles';\n\nconst Dashboard = () => {\n  const [foods, setFoods] = useState([]);\n  const [editingFood, setEditingFood] = useState({});\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  useEffect(() => {\n    async function loadFoods() {\n      const response = await api.get('/foods');\n      setFoods(response.data);\n    }\n\n    loadFoods();\n  }, []);\n\n  async function handleAddFood(food) {\n    try {// TODO ADD A NEW FOOD PLATE TO THE API\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function handleUpdateFood(food) {// TODO UPDATE A FOOD PLATE ON THE API\n  }\n\n  async function handleDeleteFood(id) {// TODO DELETE A FOOD PLATE FROM THE API\n  }\n\n  function toggleModal() {\n    setModalOpen(!modalOpen);\n  }\n\n  function toggleEditModal() {\n    setEditModalOpen(!editModalOpen);\n  }\n\n  function handleEditFood(food) {// TODO SET THE CURRENT EDITING FOOD ID IN THE STATE\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    openModal: toggleModal,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ModalAddFood, {\n    isOpen: modalOpen,\n    setIsOpen: toggleModal,\n    handleAddFood: handleAddFood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(ModalEditFood, {\n    isOpen: editModalOpen,\n    setIsOpen: toggleEditModal,\n    editingFood: editingFood,\n    handleUpdateFood: handleUpdateFood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(FoodsContainer, {\n    \"data-testid\": \"foods-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, foods && foods.map(food => /*#__PURE__*/React.createElement(Food, {\n    key: food.id,\n    food: food,\n    handleDelete: handleDeleteFood,\n    handleEditFood: handleEditFood,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }))));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/felipemachado/Documents/Gostack/gorestaurant-web/src/pages/Dashboard/index.tsx"],"names":["React","useState","useEffect","Header","api","Food","ModalAddFood","ModalEditFood","FoodsContainer","Dashboard","foods","setFoods","editingFood","setEditingFood","modalOpen","setModalOpen","editModalOpen","setEditModalOpen","loadFoods","response","get","data","handleAddFood","food","err","console","log","handleUpdateFood","handleDeleteFood","id","toggleModal","toggleEditModal","handleEditFood","map"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,OAAOC,GAAP,MAAgB,oBAAhB;AAEA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,SAASC,cAAT,QAA+B,UAA/B;;AAWA,MAAMC,SAAmB,GAAG,MAAM;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAe,EAAf,CAAlC;AACA,QAAM,CAACW,WAAD,EAAcC,cAAd,IAAgCZ,QAAQ,CAAa,EAAb,CAA9C;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAAC,KAAD,CAAlD;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAegB,SAAf,GAA0C;AACxC,YAAMC,QAAQ,GAAG,MAAMf,GAAG,CAACgB,GAAJ,CAAQ,QAAR,CAAvB;AAEAT,MAAAA,QAAQ,CAACQ,QAAQ,CAACE,IAAV,CAAR;AACD;;AAEDH,IAAAA,SAAS;AACV,GARQ,EAQN,EARM,CAAT;;AAUA,iBAAeI,aAAf,CACEC,IADF,EAEiB;AACf,QAAI,CACF;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAED,iBAAeG,gBAAf,CACEJ,IADF,EAEiB,CACf;AACD;;AAED,iBAAeK,gBAAf,CAAgCC,EAAhC,EAA2D,CACzD;AACD;;AAED,WAASC,WAAT,GAA6B;AAC3Bf,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;;AAED,WAASiB,eAAT,GAAiC;AAC/Bd,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD;;AAED,WAASgB,cAAT,CAAwBT,IAAxB,EAAgD,CAC9C;AACD;;AAED,sBACE,uDACE,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEO,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEhB,SADV;AAEE,IAAA,SAAS,EAAEgB,WAFb;AAGE,IAAA,aAAa,EAAER,aAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAOE,oBAAC,aAAD;AACE,IAAA,MAAM,EAAEN,aADV;AAEE,IAAA,SAAS,EAAEe,eAFb;AAGE,IAAA,WAAW,EAAEnB,WAHf;AAIE,IAAA,gBAAgB,EAAEe,gBAJpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAcE,oBAAC,cAAD;AAAgB,mBAAY,YAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjB,KAAK,IACJA,KAAK,CAACuB,GAAN,CAAUV,IAAI,iBACZ,oBAAC,IAAD;AACE,IAAA,GAAG,EAAEA,IAAI,CAACM,EADZ;AAEE,IAAA,IAAI,EAAEN,IAFR;AAGE,IAAA,YAAY,EAAEK,gBAHhB;AAIE,IAAA,cAAc,EAAEI,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFJ,CAdF,CADF;AA4BD,CA5ED;;AA8EA,eAAevB,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Header from '../../components/Header';\n\nimport api from '../../services/api';\n\nimport Food from '../../components/Food';\nimport ModalAddFood from '../../components/ModalAddFood';\nimport ModalEditFood from '../../components/ModalEditFood';\n\nimport { FoodsContainer } from './styles';\n\ninterface IFoodPlate {\n  id: number;\n  name: string;\n  image: string;\n  price: string;\n  description: string;\n  available: boolean;\n}\n\nconst Dashboard: React.FC = () => {\n  const [foods, setFoods] = useState<IFoodPlate[]>([]);\n  const [editingFood, setEditingFood] = useState<IFoodPlate>({} as IFoodPlate);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  useEffect(() => {\n    async function loadFoods(): Promise<void> {\n      const response = await api.get('/foods');\n\n      setFoods(response.data);\n    }\n\n    loadFoods();\n  }, []);\n\n  async function handleAddFood(\n    food: Omit<IFoodPlate, 'id' | 'available'>,\n  ): Promise<void> {\n    try {\n      // TODO ADD A NEW FOOD PLATE TO THE API\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  async function handleUpdateFood(\n    food: Omit<IFoodPlate, 'id' | 'available'>,\n  ): Promise<void> {\n    // TODO UPDATE A FOOD PLATE ON THE API\n  }\n\n  async function handleDeleteFood(id: number): Promise<void> {\n    // TODO DELETE A FOOD PLATE FROM THE API\n  }\n\n  function toggleModal(): void {\n    setModalOpen(!modalOpen);\n  }\n\n  function toggleEditModal(): void {\n    setEditModalOpen(!editModalOpen);\n  }\n\n  function handleEditFood(food: IFoodPlate): void {\n    // TODO SET THE CURRENT EDITING FOOD ID IN THE STATE\n  }\n\n  return (\n    <>\n      <Header openModal={toggleModal} />\n      <ModalAddFood\n        isOpen={modalOpen}\n        setIsOpen={toggleModal}\n        handleAddFood={handleAddFood}\n      />\n      <ModalEditFood\n        isOpen={editModalOpen}\n        setIsOpen={toggleEditModal}\n        editingFood={editingFood}\n        handleUpdateFood={handleUpdateFood}\n      />\n\n      <FoodsContainer data-testid=\"foods-list\">\n        {foods &&\n          foods.map(food => (\n            <Food\n              key={food.id}\n              food={food}\n              handleDelete={handleDeleteFood}\n              handleEditFood={handleEditFood}\n            />\n          ))}\n      </FoodsContainer>\n    </>\n  );\n};\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}